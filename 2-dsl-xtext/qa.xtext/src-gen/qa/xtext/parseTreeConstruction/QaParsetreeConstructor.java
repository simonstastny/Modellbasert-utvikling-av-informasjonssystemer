/*
* generated by Xtext
*/
package qa.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import qa.xtext.services.QaGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class QaParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private QaGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainer_Alternatives(this, this, 0, inst);
			case 1: return new QATest_Group(this, this, 1, inst);
			case 2: return new QAContainerOptions_Group(this, this, 2, inst);
			case 3: return new QAPart_Alternatives(this, this, 3, inst);
			case 4: return new QASection_Group(this, this, 4, inst);
			case 5: return new NextRule_Group(this, this, 5, inst);
			case 6: return new TextAnswer_Group(this, this, 6, inst);
			case 7: return new ExpressionAnswer_Group(this, this, 7, inst);
			case 8: return new NumberAnswer_Alternatives(this, this, 8, inst);
			case 9: return new YesNoAnswer_Group(this, this, 9, inst);
			case 10: return new OptionAnswer_Group(this, this, 10, inst);
			case 11: return new Answer_Alternatives(this, this, 11, inst);
			case 12: return new Question_Group(this, this, 12, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule QAContainer ****************
 *
 * QAContainer:
 * 	QATest | QASection;
 *
 **/

// QATest | QASection
protected class QAContainer_Alternatives extends AlternativesToken {

	public QAContainer_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getQAContainerAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainer_QATestParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QAContainer_QASectionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQASectionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getQATestRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// QATest
protected class QAContainer_QATestParserRuleCall_0 extends RuleCallToken {
	
	public QAContainer_QATestParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getQAContainerAccess().getQATestParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QATest_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQATestRule().getType().getClassifier())
			return null;
		if(checkForRecursion(QATest_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// QASection
protected class QAContainer_QASectionParserRuleCall_1 extends RuleCallToken {
	
	public QAContainer_QASectionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getQAContainerAccess().getQASectionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QASection_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQASectionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(QASection_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule QAContainer ****************/


/************ begin Rule QATest ****************
 *
 * QATest:
 * 	"Title: " title=EString options=QAContainerOptions? parts+=QAPart*;
 *
 **/

// "Title: " title=EString options=QAContainerOptions? parts+=QAPart*
protected class QATest_Group extends GroupToken {
	
	public QATest_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getQATestAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QATest_PartsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QATest_OptionsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new QATest_TitleAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQATestRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "Title: "
protected class QATest_TitleKeyword_0 extends KeywordToken  {
	
	public QATest_TitleKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQATestAccess().getTitleKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// title=EString
protected class QATest_TitleAssignment_1 extends AssignmentToken  {
	
	public QATest_TitleAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQATestAccess().getTitleAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QATest_TitleKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("title",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("title");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getQATestAccess().getTitleEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getQATestAccess().getTitleEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// options=QAContainerOptions?
protected class QATest_OptionsAssignment_2 extends AssignmentToken  {
	
	public QATest_OptionsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQATestAccess().getOptionsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainerOptions_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("options",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("options");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQAContainerOptionsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQATestAccess().getOptionsQAContainerOptionsParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QATest_TitleAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// parts+=QAPart*
protected class QATest_PartsAssignment_3 extends AssignmentToken  {
	
	public QATest_PartsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQATestAccess().getPartsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAPart_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parts",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQAPartRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQATestAccess().getPartsQAPartParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QATest_PartsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new QATest_OptionsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new QATest_TitleAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule QATest ****************/


/************ begin Rule QAContainerOptions ****************
 *
 * QAContainerOptions:
 * 	"RevealAnswer: " revealAnswer=EBoolean "try" maxTries=INT "times" (revealAnswer?="reveal" "correct" "answer")?;
 *
 **/

// "RevealAnswer: " revealAnswer=EBoolean "try" maxTries=INT "times" (revealAnswer?="reveal" "correct" "answer")?
protected class QAContainerOptions_Group extends GroupToken {
	
	public QAContainerOptions_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getQAContainerOptionsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainerOptions_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QAContainerOptions_TimesKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQAContainerOptionsRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "RevealAnswer: "
protected class QAContainerOptions_RevealAnswerKeyword_0 extends KeywordToken  {
	
	public QAContainerOptions_RevealAnswerKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQAContainerOptionsAccess().getRevealAnswerKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// revealAnswer=EBoolean
protected class QAContainerOptions_RevealAnswerAssignment_1 extends AssignmentToken  {
	
	public QAContainerOptions_RevealAnswerAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQAContainerOptionsAccess().getRevealAnswerAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainerOptions_RevealAnswerKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("revealAnswer",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("revealAnswer");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getQAContainerOptionsAccess().getRevealAnswerEBooleanParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getQAContainerOptionsAccess().getRevealAnswerEBooleanParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "try"
protected class QAContainerOptions_TryKeyword_2 extends KeywordToken  {
	
	public QAContainerOptions_TryKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQAContainerOptionsAccess().getTryKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainerOptions_RevealAnswerAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// maxTries=INT
protected class QAContainerOptions_MaxTriesAssignment_3 extends AssignmentToken  {
	
	public QAContainerOptions_MaxTriesAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQAContainerOptionsAccess().getMaxTriesAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainerOptions_TryKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("maxTries",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("maxTries");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getQAContainerOptionsAccess().getMaxTriesINTTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getQAContainerOptionsAccess().getMaxTriesINTTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "times"
protected class QAContainerOptions_TimesKeyword_4 extends KeywordToken  {
	
	public QAContainerOptions_TimesKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQAContainerOptionsAccess().getTimesKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainerOptions_MaxTriesAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (revealAnswer?="reveal" "correct" "answer")?
protected class QAContainerOptions_Group_5 extends GroupToken {
	
	public QAContainerOptions_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getQAContainerOptionsAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainerOptions_AnswerKeyword_5_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// revealAnswer?="reveal"
protected class QAContainerOptions_RevealAnswerAssignment_5_0 extends AssignmentToken  {
	
	public QAContainerOptions_RevealAnswerAssignment_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQAContainerOptionsAccess().getRevealAnswerAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainerOptions_TimesKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("revealAnswer",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("revealAnswer");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getQAContainerOptionsAccess().getRevealAnswerRevealKeyword_5_0_0();
			return obj;
		}
		return null;
	}

}

// "correct"
protected class QAContainerOptions_CorrectKeyword_5_1 extends KeywordToken  {
	
	public QAContainerOptions_CorrectKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQAContainerOptionsAccess().getCorrectKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainerOptions_RevealAnswerAssignment_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "answer"
protected class QAContainerOptions_AnswerKeyword_5_2 extends KeywordToken  {
	
	public QAContainerOptions_AnswerKeyword_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQAContainerOptionsAccess().getAnswerKeyword_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainerOptions_CorrectKeyword_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule QAContainerOptions ****************/


/************ begin Rule QAPart ****************
 *
 * QAPart:
 * 	Question | QASection;
 *
 **/

// Question | QASection
protected class QAPart_Alternatives extends AlternativesToken {

	public QAPart_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getQAPartAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAPart_QuestionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QAPart_QASectionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQASectionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getQuestionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Question
protected class QAPart_QuestionParserRuleCall_0 extends RuleCallToken {
	
	public QAPart_QuestionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getQAPartAccess().getQuestionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Question_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQuestionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Question_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// QASection
protected class QAPart_QASectionParserRuleCall_1 extends RuleCallToken {
	
	public QAPart_QASectionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getQAPartAccess().getQASectionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QASection_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQASectionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(QASection_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule QAPart ****************/


/************ begin Rule QASection ****************
 *
 * QASection:
 * 	"Title: " title=EString "Name: " name=EString options=QAContainerOptions? questions+=Question*;
 *
 **/

// "Title: " title=EString "Name: " name=EString options=QAContainerOptions? questions+=Question*
protected class QASection_Group extends GroupToken {
	
	public QASection_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getQASectionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QASection_QuestionsAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QASection_OptionsAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new QASection_NameAssignment_3(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQASectionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "Title: "
protected class QASection_TitleKeyword_0 extends KeywordToken  {
	
	public QASection_TitleKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQASectionAccess().getTitleKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// title=EString
protected class QASection_TitleAssignment_1 extends AssignmentToken  {
	
	public QASection_TitleAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQASectionAccess().getTitleAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QASection_TitleKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("title",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("title");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getQASectionAccess().getTitleEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getQASectionAccess().getTitleEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "Name: "
protected class QASection_NameKeyword_2 extends KeywordToken  {
	
	public QASection_NameKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQASectionAccess().getNameKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QASection_TitleAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=EString
protected class QASection_NameAssignment_3 extends AssignmentToken  {
	
	public QASection_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQASectionAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QASection_NameKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getQASectionAccess().getNameEStringParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getQASectionAccess().getNameEStringParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// options=QAContainerOptions?
protected class QASection_OptionsAssignment_4 extends AssignmentToken  {
	
	public QASection_OptionsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQASectionAccess().getOptionsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QAContainerOptions_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("options",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("options");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQAContainerOptionsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQASectionAccess().getOptionsQAContainerOptionsParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QASection_NameAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// questions+=Question*
protected class QASection_QuestionsAssignment_5 extends AssignmentToken  {
	
	public QASection_QuestionsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQASectionAccess().getQuestionsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Question_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("questions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("questions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQuestionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQASectionAccess().getQuestionsQuestionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QASection_QuestionsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new QASection_OptionsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new QASection_NameAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule QASection ****************/


/************ begin Rule NextRule ****************
 *
 * NextRule:
 * 	"Tries: " tries=EInt;
 *
 **/

// "Tries: " tries=EInt
protected class NextRule_Group extends GroupToken {
	
	public NextRule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNextRuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NextRule_TriesAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNextRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "Tries: "
protected class NextRule_TriesKeyword_0 extends KeywordToken  {
	
	public NextRule_TriesKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNextRuleAccess().getTriesKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// tries=EInt
protected class NextRule_TriesAssignment_1 extends AssignmentToken  {
	
	public NextRule_TriesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNextRuleAccess().getTriesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NextRule_TriesKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tries",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tries");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNextRuleAccess().getTriesEIntParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getNextRuleAccess().getTriesEIntParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NextRule ****************/


/************ begin Rule TextAnswer ****************
 *
 * TextAnswer:
 * 	"Text: " text=EString;
 *
 **/

// "Text: " text=EString
protected class TextAnswer_Group extends GroupToken {
	
	public TextAnswer_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTextAnswerAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TextAnswer_TextAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTextAnswerRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "Text: "
protected class TextAnswer_TextKeyword_0 extends KeywordToken  {
	
	public TextAnswer_TextKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTextAnswerAccess().getTextKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// text=EString
protected class TextAnswer_TextAssignment_1 extends AssignmentToken  {
	
	public TextAnswer_TextAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTextAnswerAccess().getTextAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TextAnswer_TextKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("text",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTextAnswerAccess().getTextEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getTextAnswerAccess().getTextEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TextAnswer ****************/


/************ begin Rule ExpressionAnswer ****************
 *
 * ExpressionAnswer:
 * 	"Epsilon: " epsilon=EDouble "Number: " number=EDouble "Expression: " expression=EString;
 *
 **/

// "Epsilon: " epsilon=EDouble "Number: " number=EDouble "Expression: " expression=EString
protected class ExpressionAnswer_Group extends GroupToken {
	
	public ExpressionAnswer_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpressionAnswerAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionAnswer_ExpressionAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionAnswerRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "Epsilon: "
protected class ExpressionAnswer_EpsilonKeyword_0 extends KeywordToken  {
	
	public ExpressionAnswer_EpsilonKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionAnswerAccess().getEpsilonKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// epsilon=EDouble
protected class ExpressionAnswer_EpsilonAssignment_1 extends AssignmentToken  {
	
	public ExpressionAnswer_EpsilonAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionAnswerAccess().getEpsilonAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionAnswer_EpsilonKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("epsilon",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("epsilon");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExpressionAnswerAccess().getEpsilonEDoubleParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getExpressionAnswerAccess().getEpsilonEDoubleParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "Number: "
protected class ExpressionAnswer_NumberKeyword_2 extends KeywordToken  {
	
	public ExpressionAnswer_NumberKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionAnswerAccess().getNumberKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionAnswer_EpsilonAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// number=EDouble
protected class ExpressionAnswer_NumberAssignment_3 extends AssignmentToken  {
	
	public ExpressionAnswer_NumberAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionAnswerAccess().getNumberAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionAnswer_NumberKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("number",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("number");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExpressionAnswerAccess().getNumberEDoubleParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getExpressionAnswerAccess().getNumberEDoubleParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "Expression: "
protected class ExpressionAnswer_ExpressionKeyword_4 extends KeywordToken  {
	
	public ExpressionAnswer_ExpressionKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionAnswerAccess().getExpressionKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionAnswer_NumberAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=EString
protected class ExpressionAnswer_ExpressionAssignment_5 extends AssignmentToken  {
	
	public ExpressionAnswer_ExpressionAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionAnswerAccess().getExpressionAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionAnswer_ExpressionKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExpressionAnswerAccess().getExpressionEStringParserRuleCall_5_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getExpressionAnswerAccess().getExpressionEStringParserRuleCall_5_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ExpressionAnswer ****************/


/************ begin Rule NumberAnswer ****************
 *
 * NumberAnswer:
 * 	"Epsilon: " epsilon=EDouble "Number: " number=EDouble | ExpressionAnswer;
 *
 **/

// "Epsilon: " epsilon=EDouble "Number: " number=EDouble | ExpressionAnswer
protected class NumberAnswer_Alternatives extends AlternativesToken {

	public NumberAnswer_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNumberAnswerAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumberAnswer_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NumberAnswer_ExpressionAnswerParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionAnswerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAnswerRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "Epsilon: " epsilon=EDouble "Number: " number=EDouble
protected class NumberAnswer_Group_0 extends GroupToken {
	
	public NumberAnswer_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNumberAnswerAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumberAnswer_NumberAssignment_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNumberAnswerRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "Epsilon: "
protected class NumberAnswer_EpsilonKeyword_0_0 extends KeywordToken  {
	
	public NumberAnswer_EpsilonKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNumberAnswerAccess().getEpsilonKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// epsilon=EDouble
protected class NumberAnswer_EpsilonAssignment_0_1 extends AssignmentToken  {
	
	public NumberAnswer_EpsilonAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNumberAnswerAccess().getEpsilonAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumberAnswer_EpsilonKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("epsilon",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("epsilon");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNumberAnswerAccess().getEpsilonEDoubleParserRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getNumberAnswerAccess().getEpsilonEDoubleParserRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}

// "Number: "
protected class NumberAnswer_NumberKeyword_0_2 extends KeywordToken  {
	
	public NumberAnswer_NumberKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNumberAnswerAccess().getNumberKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumberAnswer_EpsilonAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// number=EDouble
protected class NumberAnswer_NumberAssignment_0_3 extends AssignmentToken  {
	
	public NumberAnswer_NumberAssignment_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNumberAnswerAccess().getNumberAssignment_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumberAnswer_NumberKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("number",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("number");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNumberAnswerAccess().getNumberEDoubleParserRuleCall_0_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getNumberAnswerAccess().getNumberEDoubleParserRuleCall_0_3_0();
			return obj;
		}
		return null;
	}

}


// ExpressionAnswer
protected class NumberAnswer_ExpressionAnswerParserRuleCall_1 extends RuleCallToken {
	
	public NumberAnswer_ExpressionAnswerParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNumberAnswerAccess().getExpressionAnswerParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionAnswer_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionAnswerRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ExpressionAnswer_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule NumberAnswer ****************/


/************ begin Rule YesNoAnswer ****************
 *
 * YesNoAnswer:
 * 	"Yes: " yes?=EBoolean;
 *
 **/

// "Yes: " yes?=EBoolean
protected class YesNoAnswer_Group extends GroupToken {
	
	public YesNoAnswer_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getYesNoAnswerAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new YesNoAnswer_YesAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getYesNoAnswerRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "Yes: "
protected class YesNoAnswer_YesKeyword_0 extends KeywordToken  {
	
	public YesNoAnswer_YesKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getYesNoAnswerAccess().getYesKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// yes?=EBoolean
protected class YesNoAnswer_YesAssignment_1 extends AssignmentToken  {
	
	public YesNoAnswer_YesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getYesNoAnswerAccess().getYesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new YesNoAnswer_YesKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("yes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("yes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getYesNoAnswerAccess().getYesEBooleanParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getYesNoAnswerAccess().getYesEBooleanParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule YesNoAnswer ****************/


/************ begin Rule OptionAnswer ****************
 *
 * OptionAnswer:
 * 	"OptionNumber: " optionNumber=EInt;
 *
 **/

// "OptionNumber: " optionNumber=EInt
protected class OptionAnswer_Group extends GroupToken {
	
	public OptionAnswer_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOptionAnswerAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionAnswer_OptionNumberAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOptionAnswerRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "OptionNumber: "
protected class OptionAnswer_OptionNumberKeyword_0 extends KeywordToken  {
	
	public OptionAnswer_OptionNumberKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionAnswerAccess().getOptionNumberKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// optionNumber=EInt
protected class OptionAnswer_OptionNumberAssignment_1 extends AssignmentToken  {
	
	public OptionAnswer_OptionNumberAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOptionAnswerAccess().getOptionNumberAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionAnswer_OptionNumberKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("optionNumber",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("optionNumber");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOptionAnswerAccess().getOptionNumberEIntParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getOptionAnswerAccess().getOptionNumberEIntParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule OptionAnswer ****************/


/************ begin Rule Answer ****************
 *
 * Answer:
 * 	TextAnswer | NumberAnswer | YesNoAnswer | OptionAnswer;
 *
 **/

// TextAnswer | NumberAnswer | YesNoAnswer | OptionAnswer
protected class Answer_Alternatives extends AlternativesToken {

	public Answer_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnswerAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Answer_TextAnswerParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Answer_NumberAnswerParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Answer_YesNoAnswerParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Answer_OptionAnswerParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionAnswerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAnswerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOptionAnswerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTextAnswerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getYesNoAnswerRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TextAnswer
protected class Answer_TextAnswerParserRuleCall_0 extends RuleCallToken {
	
	public Answer_TextAnswerParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAnswerAccess().getTextAnswerParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TextAnswer_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTextAnswerRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TextAnswer_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NumberAnswer
protected class Answer_NumberAnswerParserRuleCall_1 extends RuleCallToken {
	
	public Answer_NumberAnswerParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAnswerAccess().getNumberAnswerParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumberAnswer_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionAnswerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAnswerRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NumberAnswer_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// YesNoAnswer
protected class Answer_YesNoAnswerParserRuleCall_2 extends RuleCallToken {
	
	public Answer_YesNoAnswerParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAnswerAccess().getYesNoAnswerParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new YesNoAnswer_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getYesNoAnswerRule().getType().getClassifier())
			return null;
		if(checkForRecursion(YesNoAnswer_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// OptionAnswer
protected class Answer_OptionAnswerParserRuleCall_3 extends RuleCallToken {
	
	public Answer_OptionAnswerParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAnswerAccess().getOptionAnswerParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionAnswer_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOptionAnswerRule().getType().getClassifier())
			return null;
		if(checkForRecursion(OptionAnswer_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Answer ****************/


/************ begin Rule Question ****************
 *
 * Question:
 * 	"Text: " text=EString "Name: " name=EString nextRules+=NextRule* correct=Answer? candidates+=Answer*;
 *
 **/

// "Text: " text=EString "Name: " name=EString nextRules+=NextRule* correct=Answer? candidates+=Answer*
protected class Question_Group extends GroupToken {
	
	public Question_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getQuestionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Question_CandidatesAssignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Question_CorrectAssignment_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Question_NextRulesAssignment_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Question_NameAssignment_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQuestionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "Text: "
protected class Question_TextKeyword_0 extends KeywordToken  {
	
	public Question_TextKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQuestionAccess().getTextKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// text=EString
protected class Question_TextAssignment_1 extends AssignmentToken  {
	
	public Question_TextAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQuestionAccess().getTextAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Question_TextKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("text",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getQuestionAccess().getTextEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getQuestionAccess().getTextEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "Name: "
protected class Question_NameKeyword_2 extends KeywordToken  {
	
	public Question_NameKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQuestionAccess().getNameKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Question_TextAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=EString
protected class Question_NameAssignment_3 extends AssignmentToken  {
	
	public Question_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQuestionAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Question_NameKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getQuestionAccess().getNameEStringParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getQuestionAccess().getNameEStringParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// nextRules+=NextRule*
protected class Question_NextRulesAssignment_4 extends AssignmentToken  {
	
	public Question_NextRulesAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQuestionAccess().getNextRulesAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NextRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nextRules",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nextRules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNextRuleRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQuestionAccess().getNextRulesNextRuleParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Question_NextRulesAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Question_NameAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// correct=Answer?
protected class Question_CorrectAssignment_5 extends AssignmentToken  {
	
	public Question_CorrectAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQuestionAccess().getCorrectAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Answer_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("correct",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("correct");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnswerRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQuestionAccess().getCorrectAnswerParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Question_NextRulesAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Question_NameAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// candidates+=Answer*
protected class Question_CandidatesAssignment_6 extends AssignmentToken  {
	
	public Question_CandidatesAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQuestionAccess().getCandidatesAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Answer_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("candidates",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("candidates");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnswerRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQuestionAccess().getCandidatesAnswerParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Question_CandidatesAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Question_CorrectAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Question_NextRulesAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new Question_NameAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Question ****************/





}
