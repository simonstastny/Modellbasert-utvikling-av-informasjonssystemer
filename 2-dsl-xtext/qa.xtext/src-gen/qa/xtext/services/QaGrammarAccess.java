/*
* generated by Xtext
*/

package qa.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class QaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class QATestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QATest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Assignment cOptionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptionsQAContainerOptionsParserRuleCall_2_0 = (RuleCall)cOptionsAssignment_2.eContents().get(0);
		
		////(parts += QAPart)*
		//QATest:
		//	"Title: " title=EString options=QAContainerOptions?;
		public ParserRule getRule() { return rule; }

		//"Title: " title=EString options=QAContainerOptions?
		public Group getGroup() { return cGroup; }

		//"Title: "
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }

		//title=EString
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_1_0() { return cTitleEStringParserRuleCall_1_0; }

		//options=QAContainerOptions?
		public Assignment getOptionsAssignment_2() { return cOptionsAssignment_2; }

		//QAContainerOptions
		public RuleCall getOptionsQAContainerOptionsParserRuleCall_2_0() { return cOptionsQAContainerOptionsParserRuleCall_2_0; }
	}

	public class QAContainerOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QAContainerOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMaxTriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMaxTriesINTTerminalRuleCall_1_0 = (RuleCall)cMaxTriesAssignment_1.eContents().get(0);
		private final Keyword cTimesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRevealAnswerAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cRevealAnswerRevealKeyword_3_0_0 = (Keyword)cRevealAnswerAssignment_3_0.eContents().get(0);
		private final Keyword cCorrectKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cAnswerKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//QAContainerOptions:
		//	"try" maxTries=INT "times" (revealAnswer?="reveal" "correct" "answer")?;
		public ParserRule getRule() { return rule; }

		//"try" maxTries=INT "times" (revealAnswer?="reveal" "correct" "answer")?
		public Group getGroup() { return cGroup; }

		//"try"
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }

		//maxTries=INT
		public Assignment getMaxTriesAssignment_1() { return cMaxTriesAssignment_1; }

		//INT
		public RuleCall getMaxTriesINTTerminalRuleCall_1_0() { return cMaxTriesINTTerminalRuleCall_1_0; }

		//"times"
		public Keyword getTimesKeyword_2() { return cTimesKeyword_2; }

		//(revealAnswer?="reveal" "correct" "answer")?
		public Group getGroup_3() { return cGroup_3; }

		//revealAnswer?="reveal"
		public Assignment getRevealAnswerAssignment_3_0() { return cRevealAnswerAssignment_3_0; }

		//"reveal"
		public Keyword getRevealAnswerRevealKeyword_3_0_0() { return cRevealAnswerRevealKeyword_3_0_0; }

		//"correct"
		public Keyword getCorrectKeyword_3_1() { return cCorrectKeyword_3_1; }

		//"answer"
		public Keyword getAnswerKeyword_3_2() { return cAnswerKeyword_3_2; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////QAPart: Question | QASection;
		//EString returns ecore::EString:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_0 = (Alternatives)cGroup_2_2.eContents().get(0);
		private final Keyword cEKeyword_2_2_0_0 = (Keyword)cAlternatives_2_2_0.eContents().get(0);
		private final Keyword cEKeyword_2_2_0_1 = (Keyword)cAlternatives_2_2_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_2_2 = (RuleCall)cGroup_2_2.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//	"-"? INT ("." INT (("E" | "e") "-"? INT)?)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT ("." INT (("E" | "e") "-"? INT)?)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT (("E" | "e") "-"? INT)?)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }

		//(("E" | "e") "-"? INT)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"E" | "e"
		public Alternatives getAlternatives_2_2_0() { return cAlternatives_2_2_0; }

		//"E"
		public Keyword getEKeyword_2_2_0_0() { return cEKeyword_2_2_0_0; }

		//"e"
		public Keyword getEKeyword_2_2_0_1() { return cEKeyword_2_2_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_2_2_1() { return cHyphenMinusKeyword_2_2_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_2_2() { return cINTTerminalRuleCall_2_2_2; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private QATestElements pQATest;
	private QAContainerOptionsElements pQAContainerOptions;
	private EStringElements pEString;
	private EDoubleElements pEDouble;
	private EIntElements pEInt;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public QaGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////(parts += QAPart)*
	//QATest:
	//	"Title: " title=EString options=QAContainerOptions?;
	public QATestElements getQATestAccess() {
		return (pQATest != null) ? pQATest : (pQATest = new QATestElements());
	}
	
	public ParserRule getQATestRule() {
		return getQATestAccess().getRule();
	}

	//QAContainerOptions:
	//	"try" maxTries=INT "times" (revealAnswer?="reveal" "correct" "answer")?;
	public QAContainerOptionsElements getQAContainerOptionsAccess() {
		return (pQAContainerOptions != null) ? pQAContainerOptions : (pQAContainerOptions = new QAContainerOptionsElements());
	}
	
	public ParserRule getQAContainerOptionsRule() {
		return getQAContainerOptionsAccess().getRule();
	}

	////QAPart: Question | QASection;
	//EString returns ecore::EString:
	//	STRING;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	"-"? INT ("." INT (("E" | "e") "-"? INT)?)?;
	public EDoubleElements getEDoubleAccess() {
		return (pEDouble != null) ? pEDouble : (pEDouble = new EDoubleElements());
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
