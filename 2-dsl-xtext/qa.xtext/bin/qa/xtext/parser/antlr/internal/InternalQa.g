/*
* generated by Xtext
*/
grammar InternalQa;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package qa.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package qa.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import qa.xtext.services.QaGrammarAccess;

}

@parser::members {

 	private QaGrammarAccess grammarAccess;
 	
    public InternalQaParser(TokenStream input, QaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "QATest";	
   	}
   	
   	@Override
   	protected QaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleQATest
entryRuleQATest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQATestRule()); }
	 iv_ruleQATest=ruleQATest 
	 { $current=$iv_ruleQATest.current; } 
	 EOF 
;

// Rule QATest
ruleQATest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Title: ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQATestAccess().getTitleKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQATestAccess().getTitleEStringParserRuleCall_1_0()); 
	    }
		lv_title_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQATestRule());
	        }
       		set(
       			$current, 
       			"title",
        		lv_title_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQATestAccess().getOptionsQAContainerOptionsParserRuleCall_2_0()); 
	    }
		lv_options_2_0=ruleQAContainerOptions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQATestRule());
	        }
       		set(
       			$current, 
       			"options",
        		lv_options_2_0, 
        		"QAContainerOptions");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleQAContainerOptions
entryRuleQAContainerOptions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQAContainerOptionsRule()); }
	 iv_ruleQAContainerOptions=ruleQAContainerOptions 
	 { $current=$iv_ruleQAContainerOptions.current; } 
	 EOF 
;

// Rule QAContainerOptions
ruleQAContainerOptions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='try' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQAContainerOptionsAccess().getTryKeyword_0());
    }
(
(
		lv_maxTries_1_0=RULE_INT
		{
			newLeafNode(lv_maxTries_1_0, grammarAccess.getQAContainerOptionsAccess().getMaxTriesINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQAContainerOptionsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"maxTries",
        		lv_maxTries_1_0, 
        		"INT");
	    }

)
)	otherlv_2='times' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQAContainerOptionsAccess().getTimesKeyword_2());
    }
((
(
		lv_revealAnswer_3_0=	'reveal' 
    {
        newLeafNode(lv_revealAnswer_3_0, grammarAccess.getQAContainerOptionsAccess().getRevealAnswerRevealKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQAContainerOptionsRule());
	        }
       		setWithLastConsumed($current, "revealAnswer", true, "reveal");
	    }

)
)	otherlv_4='correct' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQAContainerOptionsAccess().getCorrectKeyword_3_1());
    }
	otherlv_5='answer' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getQAContainerOptionsAccess().getAnswerKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall()); 
    }

    ;









RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


