/*
* generated by Xtext
*/
package qa.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import qa.xtext.services.QaGrammarAccess;

public class QaParser extends AbstractContentAssistParser {
	
	@Inject
	private QaGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected qa.xtext.ui.contentassist.antlr.internal.InternalQaParser createParser() {
		qa.xtext.ui.contentassist.antlr.internal.InternalQaParser result = new qa.xtext.ui.contentassist.antlr.internal.InternalQaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getQAPartAccess().getAlternatives(), "rule__QAPart__Alternatives");
					put(grammarAccess.getAnswerAccess().getAlternatives(), "rule__Answer__Alternatives");
					put(grammarAccess.getYesNoAnswerAccess().getAlternatives(), "rule__YesNoAnswer__Alternatives");
					put(grammarAccess.getEDoubleAccess().getAlternatives_2_2_0(), "rule__EDouble__Alternatives_2_2_0");
					put(grammarAccess.getQATestAccess().getGroup(), "rule__QATest__Group__0");
					put(grammarAccess.getQAContainerOptionsAccess().getGroup(), "rule__QAContainerOptions__Group__0");
					put(grammarAccess.getQAContainerOptionsAccess().getGroup_3(), "rule__QAContainerOptions__Group_3__0");
					put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
					put(grammarAccess.getQuestionAccess().getGroup_0(), "rule__Question__Group_0__0");
					put(grammarAccess.getQuestionAccess().getGroup_5(), "rule__Question__Group_5__0");
					put(grammarAccess.getQuestionAccess().getGroup_5_3(), "rule__Question__Group_5_3__0");
					put(grammarAccess.getNextRuleAccess().getGroup(), "rule__NextRule__Group__0");
					put(grammarAccess.getNextRuleAccess().getGroup_4(), "rule__NextRule__Group_4__0");
					put(grammarAccess.getQASectionAccess().getGroup(), "rule__QASection__Group__0");
					put(grammarAccess.getQASectionAccess().getGroup_1(), "rule__QASection__Group_1__0");
					put(grammarAccess.getNumberAnswerAccess().getGroup(), "rule__NumberAnswer__Group__0");
					put(grammarAccess.getNumberAnswerAccess().getGroup_1(), "rule__NumberAnswer__Group_1__0");
					put(grammarAccess.getYesNoAnswerAccess().getGroup_0(), "rule__YesNoAnswer__Group_0__0");
					put(grammarAccess.getOptionAnswerAccess().getGroup(), "rule__OptionAnswer__Group__0");
					put(grammarAccess.getExpressionAnswerAccess().getGroup(), "rule__ExpressionAnswer__Group__0");
					put(grammarAccess.getExpressionAnswerAccess().getGroup_2(), "rule__ExpressionAnswer__Group_2__0");
					put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
					put(grammarAccess.getEDoubleAccess().getGroup_2(), "rule__EDouble__Group_2__0");
					put(grammarAccess.getEDoubleAccess().getGroup_2_2(), "rule__EDouble__Group_2_2__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getQATestAccess().getTitleAssignment_1(), "rule__QATest__TitleAssignment_1");
					put(grammarAccess.getQATestAccess().getOptionsAssignment_2(), "rule__QATest__OptionsAssignment_2");
					put(grammarAccess.getQATestAccess().getPartsAssignment_3(), "rule__QATest__PartsAssignment_3");
					put(grammarAccess.getQAContainerOptionsAccess().getMaxTriesAssignment_1(), "rule__QAContainerOptions__MaxTriesAssignment_1");
					put(grammarAccess.getQAContainerOptionsAccess().getRevealAnswerAssignment_3_0(), "rule__QAContainerOptions__RevealAnswerAssignment_3_0");
					put(grammarAccess.getQuestionAccess().getNameAssignment_0_1(), "rule__Question__NameAssignment_0_1");
					put(grammarAccess.getQuestionAccess().getTextAssignment_1(), "rule__Question__TextAssignment_1");
					put(grammarAccess.getQuestionAccess().getCorrectAssignment_3(), "rule__Question__CorrectAssignment_3");
					put(grammarAccess.getQuestionAccess().getCandidatesAssignment_5_2(), "rule__Question__CandidatesAssignment_5_2");
					put(grammarAccess.getQuestionAccess().getCandidatesAssignment_5_3_1(), "rule__Question__CandidatesAssignment_5_3_1");
					put(grammarAccess.getQuestionAccess().getNextRulesAssignment_6(), "rule__Question__NextRulesAssignment_6");
					put(grammarAccess.getNextRuleAccess().getNextAssignment_3(), "rule__NextRule__NextAssignment_3");
					put(grammarAccess.getNextRuleAccess().getTriesAssignment_4_1(), "rule__NextRule__TriesAssignment_4_1");
					put(grammarAccess.getQASectionAccess().getNameAssignment_1_1(), "rule__QASection__NameAssignment_1_1");
					put(grammarAccess.getQASectionAccess().getTitleAssignment_2(), "rule__QASection__TitleAssignment_2");
					put(grammarAccess.getQASectionAccess().getOptionsAssignment_3(), "rule__QASection__OptionsAssignment_3");
					put(grammarAccess.getQASectionAccess().getQuestionsAssignment_5(), "rule__QASection__QuestionsAssignment_5");
					put(grammarAccess.getTextAnswerAccess().getTextAssignment(), "rule__TextAnswer__TextAssignment");
					put(grammarAccess.getNumberAnswerAccess().getNumberAssignment_0(), "rule__NumberAnswer__NumberAssignment_0");
					put(grammarAccess.getNumberAnswerAccess().getEpsilonAssignment_1_1(), "rule__NumberAnswer__EpsilonAssignment_1_1");
					put(grammarAccess.getYesNoAnswerAccess().getYesAssignment_1(), "rule__YesNoAnswer__YesAssignment_1");
					put(grammarAccess.getOptionAnswerAccess().getOptionNumberAssignment_1(), "rule__OptionAnswer__OptionNumberAssignment_1");
					put(grammarAccess.getExpressionAnswerAccess().getExpressionAssignment_1(), "rule__ExpressionAnswer__ExpressionAssignment_1");
					put(grammarAccess.getExpressionAnswerAccess().getEpsilonAssignment_2_1(), "rule__ExpressionAnswer__EpsilonAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			qa.xtext.ui.contentassist.antlr.internal.InternalQaParser typedParser = (qa.xtext.ui.contentassist.antlr.internal.InternalQaParser) parser;
			typedParser.entryRuleQATest();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public QaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(QaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
