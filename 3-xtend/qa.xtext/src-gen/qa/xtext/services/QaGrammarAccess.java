/*
* generated by Xtext
*/

package qa.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class QaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class QATestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QATest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Assignment cOptionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptionsQAContainerOptionsParserRuleCall_2_0 = (RuleCall)cOptionsAssignment_2.eContents().get(0);
		private final Assignment cPartsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartsQAPartParserRuleCall_3_0 = (RuleCall)cPartsAssignment_3.eContents().get(0);
		
		//QATest:
		//	"Title: " title=EString options=QAContainerOptions? parts+=QAPart*;
		public ParserRule getRule() { return rule; }

		//"Title: " title=EString options=QAContainerOptions? parts+=QAPart*
		public Group getGroup() { return cGroup; }

		//"Title: "
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }

		//title=EString
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_1_0() { return cTitleEStringParserRuleCall_1_0; }

		//options=QAContainerOptions?
		public Assignment getOptionsAssignment_2() { return cOptionsAssignment_2; }

		//QAContainerOptions
		public RuleCall getOptionsQAContainerOptionsParserRuleCall_2_0() { return cOptionsQAContainerOptionsParserRuleCall_2_0; }

		//parts+=QAPart*
		public Assignment getPartsAssignment_3() { return cPartsAssignment_3; }

		//QAPart
		public RuleCall getPartsQAPartParserRuleCall_3_0() { return cPartsQAPartParserRuleCall_3_0; }
	}

	public class QAContainerOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QAContainerOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMaxTriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMaxTriesINTTerminalRuleCall_1_0 = (RuleCall)cMaxTriesAssignment_1.eContents().get(0);
		private final Keyword cTimesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRevealAnswerAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cRevealAnswerRevealKeyword_3_0_0 = (Keyword)cRevealAnswerAssignment_3_0.eContents().get(0);
		private final Keyword cCorrectKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cAnswerKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//QAContainerOptions:
		//	"try" maxTries=INT "times" (revealAnswer?="reveal" "correct" "answer")?;
		public ParserRule getRule() { return rule; }

		//"try" maxTries=INT "times" (revealAnswer?="reveal" "correct" "answer")?
		public Group getGroup() { return cGroup; }

		//"try"
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }

		//maxTries=INT
		public Assignment getMaxTriesAssignment_1() { return cMaxTriesAssignment_1; }

		//INT
		public RuleCall getMaxTriesINTTerminalRuleCall_1_0() { return cMaxTriesINTTerminalRuleCall_1_0; }

		//"times"
		public Keyword getTimesKeyword_2() { return cTimesKeyword_2; }

		//(revealAnswer?="reveal" "correct" "answer")?
		public Group getGroup_3() { return cGroup_3; }

		//revealAnswer?="reveal"
		public Assignment getRevealAnswerAssignment_3_0() { return cRevealAnswerAssignment_3_0; }

		//"reveal"
		public Keyword getRevealAnswerRevealKeyword_3_0_0() { return cRevealAnswerRevealKeyword_3_0_0; }

		//"correct"
		public Keyword getCorrectKeyword_3_1() { return cCorrectKeyword_3_1; }

		//"answer"
		public Keyword getAnswerKeyword_3_2() { return cAnswerKeyword_3_2; }
	}

	public class QAPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QAPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQuestionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQASectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//QAPart:
		//	Question | QASection;
		public ParserRule getRule() { return rule; }

		//Question | QASection
		public Alternatives getAlternatives() { return cAlternatives; }

		//Question
		public RuleCall getQuestionParserRuleCall_0() { return cQuestionParserRuleCall_0; }

		//QASection
		public RuleCall getQASectionParserRuleCall_1() { return cQASectionParserRuleCall_1; }
	}

	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cYesNoAnswerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOptionAnswerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpressionAnswerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Answer:
		//	TextAnswer | NumberAnswer | YesNoAnswer | OptionAnswer | ExpressionAnswer;
		public ParserRule getRule() { return rule; }

		//TextAnswer | NumberAnswer | YesNoAnswer | OptionAnswer | ExpressionAnswer
		public Alternatives getAlternatives() { return cAlternatives; }

		//TextAnswer
		public RuleCall getTextAnswerParserRuleCall_0() { return cTextAnswerParserRuleCall_0; }

		//NumberAnswer
		public RuleCall getNumberAnswerParserRuleCall_1() { return cNumberAnswerParserRuleCall_1; }

		//YesNoAnswer
		public RuleCall getYesNoAnswerParserRuleCall_2() { return cYesNoAnswerParserRuleCall_2; }

		//OptionAnswer
		public RuleCall getOptionAnswerParserRuleCall_3() { return cOptionAnswerParserRuleCall_3; }

		//ExpressionAnswer
		public RuleCall getExpressionAnswerParserRuleCall_4() { return cExpressionAnswerParserRuleCall_4; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cIDKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCorrectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCorrectAnswerParserRuleCall_3_0 = (RuleCall)cCorrectAssignment_3.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCandidatesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cCandidatesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cCandidatesAnswerParserRuleCall_5_2_0 = (RuleCall)cCandidatesAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cCandidatesAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cCandidatesAnswerParserRuleCall_5_3_1_0 = (RuleCall)cCandidatesAssignment_5_3_1.eContents().get(0);
		private final Assignment cNextRulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNextRulesNextRuleParserRuleCall_6_0 = (RuleCall)cNextRulesAssignment_6.eContents().get(0);
		
		//Question:
		//	("ID" name=ID)? text=EString "?"? correct=Answer "!"? ("Candidates" ":" candidates+=Answer ("," candidates+=Answer)*)?
		//	nextRules+=NextRule*;
		public ParserRule getRule() { return rule; }

		//("ID" name=ID)? text=EString "?"? correct=Answer "!"? ("Candidates" ":" candidates+=Answer ("," candidates+=Answer)*)?
		//nextRules+=NextRule*
		public Group getGroup() { return cGroup; }

		//("ID" name=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//"ID"
		public Keyword getIDKeyword_0_0() { return cIDKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//text=EString
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//EString
		public RuleCall getTextEStringParserRuleCall_1_0() { return cTextEStringParserRuleCall_1_0; }

		//"?"?
		public Keyword getQuestionMarkKeyword_2() { return cQuestionMarkKeyword_2; }

		//correct=Answer
		public Assignment getCorrectAssignment_3() { return cCorrectAssignment_3; }

		//Answer
		public RuleCall getCorrectAnswerParserRuleCall_3_0() { return cCorrectAnswerParserRuleCall_3_0; }

		//"!"?
		public Keyword getExclamationMarkKeyword_4() { return cExclamationMarkKeyword_4; }

		//("Candidates" ":" candidates+=Answer ("," candidates+=Answer)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"Candidates"
		public Keyword getCandidatesKeyword_5_0() { return cCandidatesKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//candidates+=Answer
		public Assignment getCandidatesAssignment_5_2() { return cCandidatesAssignment_5_2; }

		//Answer
		public RuleCall getCandidatesAnswerParserRuleCall_5_2_0() { return cCandidatesAnswerParserRuleCall_5_2_0; }

		//("," candidates+=Answer)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//candidates+=Answer
		public Assignment getCandidatesAssignment_5_3_1() { return cCandidatesAssignment_5_3_1; }

		//Answer
		public RuleCall getCandidatesAnswerParserRuleCall_5_3_1_0() { return cCandidatesAnswerParserRuleCall_5_3_1_0; }

		//nextRules+=NextRule*
		public Assignment getNextRulesAssignment_6() { return cNextRulesAssignment_6; }

		//NextRule
		public RuleCall getNextRulesNextRuleParserRuleCall_6_0() { return cNextRulesNextRuleParserRuleCall_6_0; }
	}

	public class NextRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NextRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNextRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNextQAPartCrossReference_3_0 = (CrossReference)cNextAssignment_3.eContents().get(0);
		private final RuleCall cNextQAPartIDTerminalRuleCall_3_0_1 = (RuleCall)cNextQAPartCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTriesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTriesINTTerminalRuleCall_4_1_0 = (RuleCall)cTriesAssignment_4_1.eContents().get(0);
		private final Keyword cTriesKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//NextRule:
		//	{NextRule} "Next" ":" next=[QAPart]? ("if" tries=INT "tries")?;
		public ParserRule getRule() { return rule; }

		//{NextRule} "Next" ":" next=[QAPart]? ("if" tries=INT "tries")?
		public Group getGroup() { return cGroup; }

		//{NextRule}
		public Action getNextRuleAction_0() { return cNextRuleAction_0; }

		//"Next"
		public Keyword getNextKeyword_1() { return cNextKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//next=[QAPart]?
		public Assignment getNextAssignment_3() { return cNextAssignment_3; }

		//[QAPart]
		public CrossReference getNextQAPartCrossReference_3_0() { return cNextQAPartCrossReference_3_0; }

		//ID
		public RuleCall getNextQAPartIDTerminalRuleCall_3_0_1() { return cNextQAPartIDTerminalRuleCall_3_0_1; }

		//("if" tries=INT "tries")?
		public Group getGroup_4() { return cGroup_4; }

		//"if"
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }

		//tries=INT
		public Assignment getTriesAssignment_4_1() { return cTriesAssignment_4_1; }

		//INT
		public RuleCall getTriesINTTerminalRuleCall_4_1_0() { return cTriesINTTerminalRuleCall_4_1_0; }

		//"tries"
		public Keyword getTriesKeyword_4_2() { return cTriesKeyword_4_2; }
	}

	public class QASectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QASection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEStringParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Assignment cOptionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionsQAContainerOptionsParserRuleCall_3_0 = (RuleCall)cOptionsAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cQuestionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cQuestionsQuestionParserRuleCall_5_0 = (RuleCall)cQuestionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//QASection:
		//	"Section" ("ID" name=ID)? title=EString options=QAContainerOptions? "{" questions+=Question* "}";
		public ParserRule getRule() { return rule; }

		//"Section" ("ID" name=ID)? title=EString options=QAContainerOptions? "{" questions+=Question* "}"
		public Group getGroup() { return cGroup; }

		//"Section"
		public Keyword getSectionKeyword_0() { return cSectionKeyword_0; }

		//("ID" name=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"ID"
		public Keyword getIDKeyword_1_0() { return cIDKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//title=EString
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_2_0() { return cTitleEStringParserRuleCall_2_0; }

		//options=QAContainerOptions?
		public Assignment getOptionsAssignment_3() { return cOptionsAssignment_3; }

		//QAContainerOptions
		public RuleCall getOptionsQAContainerOptionsParserRuleCall_3_0() { return cOptionsQAContainerOptionsParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//questions+=Question*
		public Assignment getQuestionsAssignment_5() { return cQuestionsAssignment_5; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_5_0() { return cQuestionsQuestionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class TextAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextAnswer");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		//TextAnswer:
		//	text=EString;
		public ParserRule getRule() { return rule; }

		//text=EString
		public Assignment getTextAssignment() { return cTextAssignment; }

		//EString
		public RuleCall getTextEStringParserRuleCall_0() { return cTextEStringParserRuleCall_0; }
	}

	public class NumberAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumberEDoubleParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEpsilonAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEpsilonEDoubleParserRuleCall_1_1_0 = (RuleCall)cEpsilonAssignment_1_1.eContents().get(0);
		
		//NumberAnswer:
		//	number=EDouble ("+-" epsilon=EDouble)?;
		public ParserRule getRule() { return rule; }

		//number=EDouble ("+-" epsilon=EDouble)?
		public Group getGroup() { return cGroup; }

		//number=EDouble
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }

		//EDouble
		public RuleCall getNumberEDoubleParserRuleCall_0_0() { return cNumberEDoubleParserRuleCall_0_0; }

		//("+-" epsilon=EDouble)?
		public Group getGroup_1() { return cGroup_1; }

		//"+-"
		public Keyword getPlusSignHyphenMinusKeyword_1_0() { return cPlusSignHyphenMinusKeyword_1_0; }

		//epsilon=EDouble
		public Assignment getEpsilonAssignment_1_1() { return cEpsilonAssignment_1_1; }

		//EDouble
		public RuleCall getEpsilonEDoubleParserRuleCall_1_1_0() { return cEpsilonEDoubleParserRuleCall_1_1_0; }
	}

	public class YesNoAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "YesNoAnswer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cYesNoAnswerAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNoKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cYesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cYesYesKeyword_1_0 = (Keyword)cYesAssignment_1.eContents().get(0);
		
		//YesNoAnswer:
		//	{YesNoAnswer} "no" | yes?="yes";
		public ParserRule getRule() { return rule; }

		//{YesNoAnswer} "no" | yes?="yes"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{YesNoAnswer} "no"
		public Group getGroup_0() { return cGroup_0; }

		//{YesNoAnswer}
		public Action getYesNoAnswerAction_0_0() { return cYesNoAnswerAction_0_0; }

		//"no"
		public Keyword getNoKeyword_0_1() { return cNoKeyword_0_1; }

		//yes?="yes"
		public Assignment getYesAssignment_1() { return cYesAssignment_1; }

		//"yes"
		public Keyword getYesYesKeyword_1_0() { return cYesYesKeyword_1_0; }
	}

	public class OptionAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionNumberEIntParserRuleCall_1_0 = (RuleCall)cOptionNumberAssignment_1.eContents().get(0);
		
		//OptionAnswer:
		//	"#" optionNumber=EInt;
		public ParserRule getRule() { return rule; }

		//"#" optionNumber=EInt
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//optionNumber=EInt
		public Assignment getOptionNumberAssignment_1() { return cOptionNumberAssignment_1; }

		//EInt
		public RuleCall getOptionNumberEIntParserRuleCall_1_0() { return cOptionNumberEIntParserRuleCall_1_0; }
	}

	public class ExpressionAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionEStringParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPlusSignHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEpsilonAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEpsilonEDoubleParserRuleCall_2_1_0 = (RuleCall)cEpsilonAssignment_2_1.eContents().get(0);
		
		//ExpressionAnswer:
		//	"=" expression=EString ("+-" epsilon=EDouble)?;
		public ParserRule getRule() { return rule; }

		//"=" expression=EString ("+-" epsilon=EDouble)?
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//expression=EString
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//EString
		public RuleCall getExpressionEStringParserRuleCall_1_0() { return cExpressionEStringParserRuleCall_1_0; }

		//("+-" epsilon=EDouble)?
		public Group getGroup_2() { return cGroup_2; }

		//"+-"
		public Keyword getPlusSignHyphenMinusKeyword_2_0() { return cPlusSignHyphenMinusKeyword_2_0; }

		//epsilon=EDouble
		public Assignment getEpsilonAssignment_2_1() { return cEpsilonAssignment_2_1; }

		//EDouble
		public RuleCall getEpsilonEDoubleParserRuleCall_2_1_0() { return cEpsilonEDoubleParserRuleCall_2_1_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_0 = (Alternatives)cGroup_2_2.eContents().get(0);
		private final Keyword cEKeyword_2_2_0_0 = (Keyword)cAlternatives_2_2_0.eContents().get(0);
		private final Keyword cEKeyword_2_2_0_1 = (Keyword)cAlternatives_2_2_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_2_2 = (RuleCall)cGroup_2_2.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//	"-"? INT ("." INT (("E" | "e") "-"? INT)?)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT ("." INT (("E" | "e") "-"? INT)?)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT (("E" | "e") "-"? INT)?)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }

		//(("E" | "e") "-"? INT)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"E" | "e"
		public Alternatives getAlternatives_2_2_0() { return cAlternatives_2_2_0; }

		//"E"
		public Keyword getEKeyword_2_2_0_0() { return cEKeyword_2_2_0_0; }

		//"e"
		public Keyword getEKeyword_2_2_0_1() { return cEKeyword_2_2_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_2_2_1() { return cHyphenMinusKeyword_2_2_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_2_2() { return cINTTerminalRuleCall_2_2_2; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private QATestElements pQATest;
	private QAContainerOptionsElements pQAContainerOptions;
	private QAPartElements pQAPart;
	private AnswerElements pAnswer;
	private QuestionElements pQuestion;
	private NextRuleElements pNextRule;
	private QASectionElements pQASection;
	private TextAnswerElements pTextAnswer;
	private NumberAnswerElements pNumberAnswer;
	private YesNoAnswerElements pYesNoAnswer;
	private OptionAnswerElements pOptionAnswer;
	private ExpressionAnswerElements pExpressionAnswer;
	private EStringElements pEString;
	private EDoubleElements pEDouble;
	private EIntElements pEInt;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public QaGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//QATest:
	//	"Title: " title=EString options=QAContainerOptions? parts+=QAPart*;
	public QATestElements getQATestAccess() {
		return (pQATest != null) ? pQATest : (pQATest = new QATestElements());
	}
	
	public ParserRule getQATestRule() {
		return getQATestAccess().getRule();
	}

	//QAContainerOptions:
	//	"try" maxTries=INT "times" (revealAnswer?="reveal" "correct" "answer")?;
	public QAContainerOptionsElements getQAContainerOptionsAccess() {
		return (pQAContainerOptions != null) ? pQAContainerOptions : (pQAContainerOptions = new QAContainerOptionsElements());
	}
	
	public ParserRule getQAContainerOptionsRule() {
		return getQAContainerOptionsAccess().getRule();
	}

	//QAPart:
	//	Question | QASection;
	public QAPartElements getQAPartAccess() {
		return (pQAPart != null) ? pQAPart : (pQAPart = new QAPartElements());
	}
	
	public ParserRule getQAPartRule() {
		return getQAPartAccess().getRule();
	}

	//Answer:
	//	TextAnswer | NumberAnswer | YesNoAnswer | OptionAnswer | ExpressionAnswer;
	public AnswerElements getAnswerAccess() {
		return (pAnswer != null) ? pAnswer : (pAnswer = new AnswerElements());
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}

	//Question:
	//	("ID" name=ID)? text=EString "?"? correct=Answer "!"? ("Candidates" ":" candidates+=Answer ("," candidates+=Answer)*)?
	//	nextRules+=NextRule*;
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//NextRule:
	//	{NextRule} "Next" ":" next=[QAPart]? ("if" tries=INT "tries")?;
	public NextRuleElements getNextRuleAccess() {
		return (pNextRule != null) ? pNextRule : (pNextRule = new NextRuleElements());
	}
	
	public ParserRule getNextRuleRule() {
		return getNextRuleAccess().getRule();
	}

	//QASection:
	//	"Section" ("ID" name=ID)? title=EString options=QAContainerOptions? "{" questions+=Question* "}";
	public QASectionElements getQASectionAccess() {
		return (pQASection != null) ? pQASection : (pQASection = new QASectionElements());
	}
	
	public ParserRule getQASectionRule() {
		return getQASectionAccess().getRule();
	}

	//TextAnswer:
	//	text=EString;
	public TextAnswerElements getTextAnswerAccess() {
		return (pTextAnswer != null) ? pTextAnswer : (pTextAnswer = new TextAnswerElements());
	}
	
	public ParserRule getTextAnswerRule() {
		return getTextAnswerAccess().getRule();
	}

	//NumberAnswer:
	//	number=EDouble ("+-" epsilon=EDouble)?;
	public NumberAnswerElements getNumberAnswerAccess() {
		return (pNumberAnswer != null) ? pNumberAnswer : (pNumberAnswer = new NumberAnswerElements());
	}
	
	public ParserRule getNumberAnswerRule() {
		return getNumberAnswerAccess().getRule();
	}

	//YesNoAnswer:
	//	{YesNoAnswer} "no" | yes?="yes";
	public YesNoAnswerElements getYesNoAnswerAccess() {
		return (pYesNoAnswer != null) ? pYesNoAnswer : (pYesNoAnswer = new YesNoAnswerElements());
	}
	
	public ParserRule getYesNoAnswerRule() {
		return getYesNoAnswerAccess().getRule();
	}

	//OptionAnswer:
	//	"#" optionNumber=EInt;
	public OptionAnswerElements getOptionAnswerAccess() {
		return (pOptionAnswer != null) ? pOptionAnswer : (pOptionAnswer = new OptionAnswerElements());
	}
	
	public ParserRule getOptionAnswerRule() {
		return getOptionAnswerAccess().getRule();
	}

	//ExpressionAnswer:
	//	"=" expression=EString ("+-" epsilon=EDouble)?;
	public ExpressionAnswerElements getExpressionAnswerAccess() {
		return (pExpressionAnswer != null) ? pExpressionAnswer : (pExpressionAnswer = new ExpressionAnswerElements());
	}
	
	public ParserRule getExpressionAnswerRule() {
		return getExpressionAnswerAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	"-"? INT ("." INT (("E" | "e") "-"? INT)?)?;
	public EDoubleElements getEDoubleAccess() {
		return (pEDouble != null) ? pEDouble : (pEDouble = new EDoubleElements());
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
